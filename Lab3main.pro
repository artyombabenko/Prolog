implement main
    open core, file, stdio

domains
    type = еженедельная; ежедневная; ежемесячная.
    подписчики = подписчики(string ФИО, string Дата).

class facts - newspaper
    издание : (integer Id_Издания, string Название_Газеты, type Тип, integer Цена).
    подписчик : (integer Id_Подписчика, string ФИО, integer Возраст, string Адрес).
    подписался : (integer Id_Издания, integer Id_Подписчика, string Дата, integer Время, integer Выручка).

class predicates
    длина : (A*) -> integer N.
    сумма_элем : (real* List) -> real Sum.
    среднее_списка : (real* List) -> real Average determ.

clauses
    длина([]) = 0.
    длина([_ | T]) = длина(T) + 1.

    сумма_элем([]) = 0.
    сумма_элем([H | T]) = сумма_элем(T) + H.

    среднее_списка(L) = сумма_элем(L) / длина(L) :-
        длина(L) > 0.

class predicates
    подписан_на : (string ФИО) -> string* Название_издания determ.
    ср_стоимость_издания : (type Тип) -> real Ср_цена determ.
    подписчики_издания : (string Название_Газеты) -> подписчики* Подписчики.
    количество_подписчиков : (string Название_Газеты) -> integer Подписчик.
    сумма_продаж : (string Название_Газеты) -> real Сумма determ.
    тип_издания : (type Тип) -> string* Название_издания.

clauses
    подписан_на(X) = List1 :-
        подписчик(N, X, _, _),
        !,
        List1 =
            [ NameIs ||
                подписался(NP, N, _, _, _),
                издание(NP, NameIs, _, _)
            ].

    ср_стоимость_издания(X) = среднее_списка([ Цена || издание(_, _, X, Цена) ]) :-
        !.

    подписчики_издания(X) = List2 :-
        !,
        List2 =
            [ подписчики(ФИО, Дата) ||
                издание(NP, X, _, _),
                подписчик(N, ФИО, _, _),
                подписался(NP, N, Дата, _, _)
            ].

    количество_подписчиков(X) = длина(подписчики_издания(X)).

    тип_издания(X) = List3 :-
        !,
        List3 = [ Name || издание(_, Name, X, _) ].

    сумма_продаж(X) = сумма_элем([ C || подписался(NP, _, _, _, C) ]) :-
        издание(NP, X, _, _),
        !.

class predicates
    write_подписчики : (подписчики* Подписчики_и_дата).
clauses
    write_подписчики(L) :-
        foreach подписчики(Name, Data) = list::getMember_nd(L) do
            writef("\t%\t%\n", Name, Data)
        end foreach.

clauses
    run() :-
        console::init(),
        reconsult("..\\newspaper.txt", newspaper),
        fail.

    run() :-
        X = "Иванов Сергей Иванович",
        write("\nПодписчик ", X, " подписан на следующие издания\n"),
        L = подписан_на(X),
        write(L, "\n"),
        fail.

    run() :-
        X = ежедневная,
        write("\nСредняя цена на издание с типом выпуска ", X, "\n"),
        L = ср_стоимость_издания(X),
        write("Средняя цена = ", L, "\n\n"),
        fail.

    run() :-
        X = "Аргументы и факты",
        L = количество_подписчиков(X),
        write("Подписчики издания\n"),
        writef("\t%\t\t\t%\n", "ФИО", "Дата начала подписки"),
        writef("\t%\n", "-----------------------------------------------"),
        write_подписчики(подписчики_издания(X)),
        write("\nВсего подписчиков = ", L, "\n\n"),
        fail.

    run() :-
        X = ежедневная,
        L = тип_издания(X),
        write("Издания с типом выпуска ", X, "\n", L, "\n\n"),
        fail.

    run() :-
        X = "Аргументы и факты",
        L = сумма_продаж(X),
        write("Сумма продаж издания ", X, " = ", L, "\n"),
        fail.

    run() :-
        succeed.

end implement main

goal
    console::run(main::run).
